{"ast":null,"code":"import React, { useRef, useState, useLayoutEffect, useCallback, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { useClickOutside } from '../hooks';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport { preventDefault } from '../utils';\nexport default function EditorContainer({\n  rowIdx,\n  column,\n  row,\n  rowHeight,\n  left,\n  top,\n  onCommit,\n  onCommitCancel,\n  scrollLeft,\n  scrollTop,\n  firstEditorKeyPress: key\n}) {\n  const editorRef = useRef(null);\n  const changeCommitted = useRef(false);\n  const changeCanceled = useRef(false);\n  const [isValid, setValid] = useState(true);\n  const prevScrollLeft = useRef(scrollLeft);\n  const prevScrollTop = useRef(scrollTop);\n  const isUnmounting = useRef(false);\n  const onClickCapture = useClickOutside(commit);\n  const getInputNode = useCallback(() => {\n    var _a;\n\n    return (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.getInputNode();\n  }, []);\n  const commitCancel = useCallback(() => {\n    changeCanceled.current = true;\n    onCommitCancel();\n  }, [onCommitCancel]);\n  useLayoutEffect(() => {\n    const inputNode = getInputNode();\n\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n    }\n\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  }, [getInputNode]); // close editor when scrolling\n\n  useEffect(() => {\n    if (scrollLeft !== prevScrollLeft.current || scrollTop !== prevScrollTop.current) {\n      commitCancel();\n    }\n  }, [commitCancel, scrollLeft, scrollTop]);\n  useEffect(() => () => {\n    isUnmounting.current = true;\n  }, []); // commit changes when editor is closed\n\n  useEffect(() => () => {\n    if (isUnmounting.current && !changeCommitted.current && !changeCanceled.current) {\n      commit();\n    }\n  });\n\n  function getInitialValue() {\n    const value = row[column.key];\n\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n\n    if (key === 'Enter' || key === 'F2') {\n      return value;\n    }\n\n    return key !== null && key !== void 0 ? key : value;\n  }\n\n  function isCaretAtBeginningOfInput() {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement && inputNode.selectionEnd === 0;\n  }\n\n  function isCaretAtEndOfInput() {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement && inputNode.selectionStart === inputNode.value.length;\n  }\n\n  function editorHasResults() {\n    var _a, _b, _c;\n\n    return (_c = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.hasResults) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : false;\n  }\n\n  function editorIsSelectOpen() {\n    var _a, _b, _c;\n\n    return (_c = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.isSelectOpen) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : false;\n  }\n\n  function isNewValueValid(value) {\n    var _a, _b;\n\n    const isValid = (_b = (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.validate) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n\n    if (typeof isValid === 'boolean') {\n      setValid(isValid);\n      return isValid;\n    }\n\n    return true;\n  }\n\n  function preventDefaultNavigation(key) {\n    return key === 'ArrowLeft' && !isCaretAtBeginningOfInput() || key === 'ArrowRight' && !isCaretAtEndOfInput() || key === 'Escape' && editorIsSelectOpen() || ['ArrowUp', 'ArrowDown'].includes(key) && editorHasResults();\n  }\n\n  function commit() {\n    if (!editorRef.current) return;\n    const updated = editorRef.current.getValue();\n\n    if (isNewValueValid(updated)) {\n      changeCommitted.current = true;\n      const cellKey = column.key;\n      onCommit({\n        cellKey,\n        rowIdx,\n        updated\n      });\n    }\n  }\n\n  function onKeyDown(e) {\n    if (preventDefaultNavigation(e.key)) {\n      e.stopPropagation();\n    } else if (['Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      commit();\n    } else if (e.key === 'Escape') {\n      commitCancel();\n    }\n  }\n\n  function createEditor() {\n    // return custom column editor or SimpleEditor if none specified\n    if (column.editor) {\n      return React.createElement(column.editor, {\n        ref: editorRef,\n        column: column,\n        value: getInitialValue(),\n        row: row,\n        height: rowHeight,\n        onCommit: commit,\n        onCommitCancel: commitCancel,\n        onOverrideKeyDown: onKeyDown\n      });\n    }\n\n    return React.createElement(SimpleTextEditor, {\n      ref: editorRef,\n      column: column,\n      value: getInitialValue(),\n      onCommit: commit\n    });\n  }\n\n  const className = clsx('rdg-editor-container', {\n    'rdg-editor-invalid': !isValid\n  });\n  return React.createElement(\"div\", {\n    className: className,\n    style: {\n      height: rowHeight,\n      width: column.width,\n      left,\n      top\n    },\n    onClickCapture: onClickCapture,\n    onKeyDown: onKeyDown,\n    onContextMenu: preventDefault\n  }, createEditor());\n}","map":null,"metadata":{},"sourceType":"module"}