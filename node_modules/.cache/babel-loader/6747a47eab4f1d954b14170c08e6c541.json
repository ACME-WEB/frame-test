{"ast":null,"code":"import React, { forwardRef, useState, useCallback } from 'react';\nimport clsx from 'clsx';\nimport { EditorContainer, EditorContainer2, EditorPortal } from './editors';\nimport { useCombinedRefs } from './hooks';\n\nfunction EditCell({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorPortalTarget,\n  editorContainerProps,\n  editor2Props,\n  onKeyDown,\n  ...props\n}, ref) {\n  const [dimensions, setDimensions] = useState(null);\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const {\n        left,\n        top\n      } = node.getBoundingClientRect();\n      setDimensions({\n        left,\n        top\n      });\n    }\n  }, []);\n  const {\n    cellClass\n  } = column;\n  className = clsx('rdg-cell', {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  }, 'rdg-cell-selected', 'rdg-cell-editing', typeof cellClass === 'function' ? cellClass(row) : cellClass, className);\n\n  function getCellContent() {\n    var _a, _b;\n\n    if (dimensions === null) return;\n    const {\n      scrollTop: docTop,\n      scrollLeft: docLeft\n    } = (_a = document.scrollingElement) !== null && _a !== void 0 ? _a : document.documentElement;\n    const {\n      left,\n      top\n    } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    if (column.editor2 !== undefined) {\n      return React.createElement(EditorContainer2, Object.assign({}, editor2Props, {\n        editorPortalTarget: editorPortalTarget,\n        rowIdx: rowIdx,\n        column: column,\n        left: gridLeft,\n        top: gridTop\n      }));\n    }\n\n    const editor = React.createElement(EditorContainer, Object.assign({}, editorContainerProps, {\n      rowIdx: rowIdx,\n      row: row,\n      column: column,\n      left: gridLeft,\n      top: gridTop\n    }));\n\n    if (((_b = column.editorOptions) === null || _b === void 0 ? void 0 : _b.createPortal) !== false) {\n      return React.createElement(EditorPortal, {\n        target: editorPortalTarget\n      }, editor);\n    }\n\n    return editor;\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": true,\n    ref: useCombinedRefs(cellRef, ref),\n    className: className,\n    style: {\n      width: column.width,\n      left: column.left\n    },\n    onKeyDown: onKeyDown\n  }, props), getCellContent());\n}\n\nexport default forwardRef(EditCell);","map":null,"metadata":{},"sourceType":"module"}