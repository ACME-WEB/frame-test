{"ast":null,"code":"import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nfunction GroupCell({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  eventBus,\n  column,\n  groupColumnIndex\n}) {\n  function toggleGroup() {\n    eventBus.dispatch('ToggleGroup', id);\n  }\n\n  function onRowSelectionChange(checked) {\n    eventBus.dispatch('SelectRow', {\n      rowIdx,\n      checked,\n      isShiftClick: false\n    });\n  } // Only make the cell clickable if the group level matches\n\n\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n  return React.createElement(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    key: column.key,\n    className: clsx('rdg-cell', {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected\n    }),\n    style: {\n      width: column.width,\n      left: column.left,\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined\n  }, column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && React.createElement(column.groupFormatter, {\n    groupKey: groupKey,\n    childRows: childRows,\n    column: column,\n    isExpanded: isExpanded,\n    isCellSelected: isCellSelected,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange,\n    toggleGroup: toggleGroup\n  }));\n}\n\nexport default memo(GroupCell);","map":null,"metadata":{},"sourceType":"module"}