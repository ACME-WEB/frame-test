{"ast":null,"code":"import React, { cloneElement } from 'react';\nexport default function ResizableHeaderCell({\n  children,\n  column,\n  onResize\n}) {\n  function onMouseDown(event) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const {\n      currentTarget\n    } = event;\n    const {\n      right\n    } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    const onMouseMove = event => {\n      handleResize(event.clientX + offset, currentTarget);\n    };\n\n    const onMouseUp = () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  }\n\n  function onTouchStart(event) {\n    const touch = event.changedTouches[0];\n    const {\n      identifier\n    } = touch;\n    const {\n      currentTarget\n    } = event;\n    const {\n      right\n    } = currentTarget.getBoundingClientRect();\n    const offset = right - touch.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event) {\n      for (const touch of event.changedTouches) {\n        if (touch.identifier === identifier) return touch;\n      }\n\n      return null;\n    }\n\n    const onTouchMove = event => {\n      const touch = getTouch(event);\n\n      if (touch) {\n        handleResize(touch.clientX + offset, currentTarget);\n      }\n    };\n\n    const onTouchEnd = event => {\n      const touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  }\n\n  function handleResize(x, target) {\n    const width = x - target.getBoundingClientRect().left;\n\n    if (width > 0) {\n      onResize(column, width);\n    }\n  }\n\n  return cloneElement(children, {\n    onMouseDown,\n    onTouchStart,\n    children: React.createElement(React.Fragment, null, children.props.children, React.createElement(\"div\", {\n      className: \"rdg-header-cell-resizer\"\n    }))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}