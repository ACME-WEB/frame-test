{"ast":null,"code":"import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nfunction GroupedRow({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  eventBus,\n  ...props\n}) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    eventBus.dispatch('SelectCell', {\n      rowIdx,\n      idx: -1\n    });\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"row\",\n    \"aria-level\": level,\n    \"aria-expanded\": isExpanded,\n    className: clsx('rdg-row', 'rdg-group-row', `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n\n    }),\n    onClick: selectGroup,\n    style: {\n      top\n    }\n  }, props), viewportColumns.map(column => React.createElement(GroupCell, {\n    key: column.key,\n    id: id,\n    rowIdx: rowIdx,\n    groupKey: groupKey,\n    childRows: childRows,\n    isExpanded: isExpanded,\n    isRowSelected: isRowSelected,\n    isCellSelected: selectedCellIdx === column.idx,\n    eventBus: eventBus,\n    column: column,\n    groupColumnIndex: idx\n  })));\n}\n\nexport default memo(GroupedRow);","map":null,"metadata":{},"sourceType":"module"}